// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockTracker.Data.Concrete.Context;

#nullable disable

namespace StockTracker.Data.Migrations
{
    [DbContext(typeof(StockTrackerDbContext))]
    [Migration("20250315220517_mg-4")]
    partial class mg4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            RoleId = "115c7796-cfac-44de-91b5-916eaae125b5"
                        },
                        new
                        {
                            UserId = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            RoleId = "811f466c-9d06-43f8-a054-24aedbb4161b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.AccountSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalExpense")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalIncome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AccountSummaries");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "115c7796-cfac-44de-91b5-916eaae125b5",
                            CreatedDate = new DateTime(2025, 3, 16, 1, 5, 17, 520, DateTimeKind.Local).AddTicks(7173),
                            Description = "Administrator role",
                            IsActive = true,
                            Name = "AdminUser",
                            NormalizedName = "ADMINUSER"
                        },
                        new
                        {
                            Id = "811f466c-9d06-43f8-a054-24aedbb4161b",
                            CreatedDate = new DateTime(2025, 3, 16, 1, 5, 17, 520, DateTimeKind.Local).AddTicks(7241),
                            Description = "Regular user role",
                            IsActive = true,
                            Name = "NormalUser",
                            NormalizedName = "NORMALUSER"
                        });
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9360786-edcb-4b38-b42a-2db66affca0b",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "mehmet@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELsR4mqTEcjAL+gPVLHpMhfgCSRfkg4EIIB/iY/OTL97VvCJrIbTowQjAo2N0w4Bxg==",
                            PhoneNumber = "5255",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78b7f6ff-b681-429e-8241-059593546e26",
                            TwoFactorEnabled = false,
                            UserName = "mehmet@gmail.com"
                        },
                        new
                        {
                            Id = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "431a5449-8933-49d8-ba08-2182bf65c673",
                            Email = "normaluser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin2",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@GMAIL.COM",
                            NormalizedUserName = "admin@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM27L65A3uY50ijgvpSxC9L4l2qyNBtPIamoTsqNyr9ItqN8ime2Z3sC/BzgxJM6Xw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dec6a618-4bfc-43de-b940-04be3aa94082",
                            TwoFactorEnabled = false,
                            UserName = "normaluser@gmail.com"
                        });
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "İstanbul",
                            CreatedAt = new DateTime(2025, 3, 16, 1, 5, 17, 592, DateTimeKind.Local).AddTicks(773),
                            Email = "ali@example.com",
                            Name = "Ali Yılmaz",
                            Phone = "555-111-2233"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ankara",
                            CreatedAt = new DateTime(2025, 3, 16, 1, 5, 17, 592, DateTimeKind.Local).AddTicks(797),
                            Email = "mehmet@example.com",
                            Name = "Mehmet Demir",
                            Phone = "555-222-3344"
                        },
                        new
                        {
                            Id = 3,
                            Address = "İzmir",
                            CreatedAt = new DateTime(2025, 3, 16, 1, 5, 17, 592, DateTimeKind.Local).AddTicks(798),
                            Email = "ayse@example.com",
                            Name = "Ayşe Çelik",
                            Phone = "555-333-4455"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Bursa",
                            CreatedAt = new DateTime(2025, 3, 16, 1, 5, 17, 592, DateTimeKind.Local).AddTicks(799),
                            Email = "zeynep@example.com",
                            Name = "Zeynep Korkmaz",
                            Phone = "555-444-5566"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Antalya",
                            CreatedAt = new DateTime(2025, 3, 16, 1, 5, 17, 592, DateTimeKind.Local).AddTicks(800),
                            Email = "mustafa@example.com",
                            Name = "Mustafa Kaya",
                            Phone = "555-555-6677"
                        });
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.DeliveredItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeliveredDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentalItemId");

                    b.ToTable("DeliveredItems");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Salary")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ahmet@example.com",
                            FullName = "Ahmet Karaca",
                            HireDate = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Phone = "544-123-4567",
                            Position = "Satış Temsilcisi",
                            Salary = 15000m
                        },
                        new
                        {
                            Id = 2,
                            Email = "elif@example.com",
                            FullName = "Elif Yıldız",
                            HireDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Phone = "544-234-5678",
                            Position = "Muhasebe",
                            Salary = 18000m
                        },
                        new
                        {
                            Id = 3,
                            Email = "caner@example.com",
                            FullName = "Caner Doğan",
                            HireDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Phone = "544-345-6789",
                            Position = "Depo Sorumlusu",
                            Salary = 17000m
                        },
                        new
                        {
                            Id = 4,
                            Email = "gizem@example.com",
                            FullName = "Gizem Arslan",
                            HireDate = new DateTime(2019, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Phone = "544-456-7890",
                            Position = "Müşteri Temsilcisi",
                            Salary = 16000m
                        },
                        new
                        {
                            Id = 5,
                            Email = "murat@example.com",
                            FullName = "Murat Şahin",
                            HireDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Phone = "544-567-8901",
                            Position = "Teknik Destek",
                            Salary = 14000m
                        });
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountTransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<double>("SquareMeters")
                        .HasColumnType("REAL");

                    b.Property<decimal>("UnitRentalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dayanıklı ve şık ahşap masa",
                            Name = "Ahşap Masa",
                            Price = 4500m,
                            SquareMeters = 2.5,
                            UnitRentalPrice = 200m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dayanıklı metal sandalye",
                            Name = "Metal Sandalye",
                            Price = 1200m,
                            SquareMeters = 1.2,
                            UnitRentalPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Konforlu ve geniş koltuk takımı",
                            Name = "Koltuk Takımı",
                            Price = 15000m,
                            SquareMeters = 5.0,
                            UnitRentalPrice = 500m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Modern laminant parke döşeme",
                            Name = "Laminant Parke",
                            Price = 3500m,
                            SquareMeters = 20.0,
                            UnitRentalPrice = 150m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Yüksek çözünürlüklü projektör",
                            Name = "Projektör",
                            Price = 5000m,
                            SquareMeters = 0.5,
                            UnitRentalPrice = 250m
                        });
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.RemainingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OverdueCharge")
                        .HasColumnType("TEXT");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentalItemId");

                    b.ToTable("RemainingItems");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.RentalItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RentalId");

                    b.ToTable("RentalItems");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockTracker.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.AccountTransaction", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.Customer", "Customer")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.DeliveredItem", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.RentalItem", "RentalItem")
                        .WithMany()
                        .HasForeignKey("RentalItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalItem");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Payment", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.AccountTransaction", "AccountTransaction")
                        .WithMany("Payments")
                        .HasForeignKey("AccountTransactionId");

                    b.HasOne("StockTracker.Entity.Concrete.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockTracker.Entity.Concrete.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTransaction");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.RemainingItem", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.RentalItem", "RentalItem")
                        .WithMany()
                        .HasForeignKey("RentalItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalItem");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Rental", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockTracker.Entity.Concrete.Employee", "Employee")
                        .WithMany("Rentals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.RentalItem", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.Product", "Product")
                        .WithMany("RentalItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockTracker.Entity.Concrete.Rental", "Rental")
                        .WithMany("RentalItems")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Stock", b =>
                {
                    b.HasOne("StockTracker.Entity.Concrete.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("StockTracker.Entity.Concrete.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.AccountTransaction", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Customer", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Employee", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Product", b =>
                {
                    b.Navigation("RentalItems");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("StockTracker.Entity.Concrete.Rental", b =>
                {
                    b.Navigation("RentalItems");
                });
#pragma warning restore 612, 618
        }
    }
}
